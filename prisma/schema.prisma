datasource db {
  provider = "postgresql"
  url      = env("PROD_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now()) @updatedAt
  settings      UserSettings?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]

  @@map("users")
}

model UserSettings {
  id         String   @id @default(cuid())
  userId     String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  emailNotifications Boolean @default(false)
  pushNotifications  Boolean @default(false)

  @@map("user_settings")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  image       String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  image       String?
  courseId    String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("lessons")
}
